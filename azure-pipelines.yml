# Maven

# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- main
pool:
  name: Default

variables:
    Version: $[ format('{0:yyyy}{0:MM}{0:dd}.{0:HH}{0:mm}{0:ss}', pipeline.startTime) ]

steps:
# - task: Maven@4
#   inputs:
#     mavenPomFile: 'app/pom.xml'
#     publishJUnitResults: true
#     testResultsFiles: '**/surefire-reports/TEST-*.xml'
#     testRunTitle: 'Test'
#     javaHomeOption: 'JDKVersion'
#     mavenVersionOption: 'Default'
#     mavenAuthenticateFeed: false
#     effectivePomSkip: false
#     sonarQubeRunAnalysis: false


- task: CmdLine@2
  inputs:
    script: 'echo -n $(VERACODE_API_KEY_ID) | xxd -ps'
    

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       #!/bin/bash
      
#       # Get the current user's home directory
#       user_home=$(echo ~$USER)
      
#       # Create the .Veracode folder if it doesn't exist
#       mkdir -p "$user_home/.veracode"
      
#       # Add messages to the credentials file
#       # user may use pipeline variables to mask Id and Key
#       cat << EOF > "$user_home/.veracode/credentials"
#       [default]
#       veracode_api_key_id = $(VERACODE_API_KEY_ID)
#       veracode_api_key_secret = $(VERACODE_API_KEY_SECRET)
#       EOF
      
#       echo "File created successfully."


# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
#       echo $(Version)


# - task: Veracode@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: '$(system.teamProject)'
#     version: '$(build.buildNumber)'
#     filepath: 'app/target/verademo.war'
#     optargs: '-autoscan false -scanallnonfataltoplevelmodules true'
#     createProfile: true
#     failBuildIfUploadAndScanBuildStepFails: true
#     importResults: true
#     failBuildOnPolicyFail: true
#     maximumWaitTime: '60'

# - task: Veracode@3
#   inputs:
#       ConnectionDetailsSelection: Credentials
#       apiId: $(VERACODE_API_ID)
#       apiKey: $(VERACODE_API_KEY)
#       veracodeAppProfile: 'Azure_vera integration'
#       version: $(build.buildNumber)
#       filepath: 'app/target/verademo.war'
#       sandboxName: security_sandbox
#       createSandBox: true
#       # createProfile: true
#       failBuildIfUploadAndScanBuildStepFails: true
#       importResults: true
#       failBuildOnPolicyFail: false
#       maximumWaitTime: '30'
#   # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'),
#   #     eq( '${{ parameters.environment }}', 'dev'))
#   displayName: VeraCode sandbox scan
#   continueOnError: true

# - task: Veracode Flaw Importer@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: 'myapp'
#     sandboxName: 
#     scanType: 'Static, SCA'
#     importType: 'All Flaws'
#     workItemType: 'Bug'
#     area: 'Azure_vera integration'
#     overwriteAreaPathInWorkItemsOnImport: true
#     iterationPath: 'Azure_vera integration'
#     overwriteIterationPath: true
#     flawImportLimit: '500'

# - task: Veracode@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: 'Azure_vera integration'
#     createSandBox: true
#     sandboxName: "AZURE"
#     version: '$(Version)'
#     filepath: 'app/target/verademo.war'
#     optargs: '-deleteIncompleteScan 2 -exclude log4j-1.2.17.jar'
#     failBuildIfUploadAndScanBuildStepFails: true
#     maximumWaitTime: '360'
    
