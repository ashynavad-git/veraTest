# Maven

# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- main

pool:
  name: Default

variables:
    Version: $[ format('{0:yyyy}{0:MM}{0:dd}.{0:HH}{0:mm}{0:ss}', pipeline.startTime) ]
    name: Azure_vera integration

steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'app/pom.xml'
    publishJUnitResults: true
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false


# - task: CmdLine@2
#   inputs:
#     script: 'echo -n $(VERACODE_API_KEY_ID) | xxd -ps'

- task: CmdLine@2
  displayName: Veracode static scan
  inputs:
    script: |
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode static scan ./app/target/verademo.war --verbose
  env: 
    VERACODE_API_KEY_ID: $(VERACODE_API_KEY_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_API_KEY_SECRET)

# - task: Bash@3
#   displayName: 'Veracode pipeline scan'
#   inputs:
#     targetType: 'inline'
#     script: |
#       curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#       unzip -o pipeline-scan-LATEST.zip
#       java -jar pipeline-scan.jar --veracode_api_id "$VERACODE_API_ID" --veracode_api_key "$VERACODE_API_KEY" --file "$(Pipeline.Workspace)/build_Artifact/Verademo.war" --baseline_file "baseline.json" 

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       #!/bin/bash
      
#       # Get the current user's home directory
#       user_home=$(echo ~$USER)
      
#       # Create the .Veracode folder if it doesn't exist
#       mkdir -p "$user_home/.veracode"
      
#       # Add messages to the credentials file
#       # user may use pipeline variables to mask Id and Key
#       cat << EOF > "$user_home/.veracode/credentials"
#       [default]
#       veracode_api_key_id = $(VERACODE_API_KEY_ID)
#       veracode_api_key_secret = $(VERACODE_API_KEY_SECRET)
#       EOF
      
#       echo "File created successfully."


# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
#       echo $(Version)


# - task: Veracode@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: '$(system.teamProject)'
#     version: '$(build.buildNumber)'
#     filepath: 'app/target/verademo.war'
#     optargs: '-autoscan false -scanallnonfataltoplevelmodules true'
#     createProfile: true
#     importResults: true
#     maximumWaitTime: '60'

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'vera_Azure'
    veracodeAppProfile: 'myapp'
    version: '$(build.buildNumber)'
    filepath: 'app/target/verademo.war'
    optargs: '-deleteincompletescan 2'
    failBuildIfUploadAndScanBuildStepFails: true
    maximumWaitTime: '30'

#   # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'),
#   #     eq( '${{ parameters.environment }}', 'dev'))
#   displayName: VeraCode sandbox scan
#   continueOnError: true

# - task: Veracode Flaw Importer@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: 'myapp'
#     sandboxName: 
#     scanType: 'Static, SCA'
#     importType: 'All Flaws'
#     workItemType: 'Bug'
#     area: 'Azure_vera integration'
#     overwriteAreaPathInWorkItemsOnImport: true
#     iterationPath: 'Azure_vera integration'
#     overwriteIterationPath: true
#     flawImportLimit: '500'
# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       python3 --version
#       pip install veracode-api-signing
      
#       user_home=$(echo ~$USER)
      
#       Create the .Veracode folder if it doesn't exist
#       mkdir -p "$user_home/.veracode"

#       cat << EOF > "$user_home/.veracode/credentials"
#       [default]
#       veracode_api_key_id = $(VERACODE_API_KEY_ID)
#       veracode_api_key_secret = $(VERACODE_API_KEY_SECRET)
#       EOF
#       http --auth-type=veracode_hmac "https://analysiscenter.veracode.com/api/5.0/getbuildinfo.do" "app_id== 1929099" "sandbox_id== 6304519"
  
# - task: Veracode@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: '$(name)'
#     version: '$(Version)'
#     filepath: 'app/target/verademo.war'
#     sandboxName: 'AZURE'
#     createSandBox: true
#     optargs: '-deleteIncompleteScan 2 -includenewmodules true -scanallnonfataltoplevelmodules true'
#     failBuildIfUploadAndScanBuildStepFails: true

    

# - task: PublishSarifResults@1
#   inputs:
#     sarifFile: '$(Build.ArtifactStagingDirectory)/veracode-sarif-results.sarif'
#     uploadToAzureDefender: true

# - task: Bash@3
#   displayName: Veracode CLI
#   env:
#     VERACODE_API_KEY_ID: $(VERACODE_API_KEY_ID)
#     VERACODE_API_KEY_SECRET: $(VERACODE_API_KEY_SECRET)
#   inputs:
#     targetType: 'inline'
#     script: |
#      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
#      ./veracode package --source . --output $(Build.ArtifactStagingDirectory)/veracode-artifacts --trust --debug
  

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       VERACODE_WRAPPER_VERSION=$(curl -sS "https://search.maven.org/solrsearch/select?q=g:%22com.veracode.vosp.api.wrappers%22&rows=20&wt=json" | jq -r '.response.docs[0].latestVersion') && curl -sS -o veracode-wrapper.jar "https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/${VERACODE_WRAPPER_VERSION}/vosp-api-wrappers-java-${VERACODE_WRAPPER_VERSION}.jar"
#       java -jar veracode-wrapper.jar -vid $(VERACODE_API_KEY_ID) -vkey $(VERACODE_API_KEY_SECRET) -action getbuildlist -appid 1841657 > buildlist.xml

#       BUILD_ID=$(xmllint --xpath "string(//*[local-name()='build'][last()]/@build_id)" buildlist.xml)

#       # Check if the BUILD_ID is retrieved
#       if [ -z "$BUILD_ID" ]; then
#         echo "No build found"
#         exit 1
#       fi

#       echo "Latest Build ID: $BUILD_ID"

#       echo "Latest Build ID: $BUILD_ID"
#       java -jar veracode-wrapper.jar -vid $(VERACODE_API_KEY_ID) -vkey $(VERACODE_API_KEY_SECRET) -action detailedreport -buildid $BUILD_ID -outputfilepath $(Build.ArtifactStagingDirectory)/detailedreport.xml



- task: Veracode Flaw Importer@3
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'vera_Azure'
    veracodeAppProfile: 'Veracode-Jenkiens'
    sandboxName: 'Free_Style'
    scanType: 'Dynamic, Static'
    importType: 'All Flaws'
    workItemType: 'Bug'
    area: 'Azure_vera integration'
    overwriteAreaPathInWorkItemsOnImport: true
    iterationPath: 'Azure_vera integration'
    overwriteIterationPath: true
    flawImportLimit: '1'